services:
  nginx:
    image: nginx:1.27.2-alpine-slim
    profiles: ["prod"]
    restart: always
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt                                  # SSL 인증서 경로
      - /var/lib/letsencrypt:/var/lib/letsencrypt                          # Certbot 인증서 갱신 관련 파일
      - /var/www/upup-radio.site:/var/www/upup-radio.site                  # front app 파일
      - /etc/nginx/conf.d:/etc/nginx/conf.d                                # Nginx 설정 디렉토리
      - /etc/nginx/sites-available:/etc/nginx/sites-available              # migration
      - /etc/nginx/sites-enabled:/etc/nginx/sites-enabled                  # migration
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf                           # Nginx 설정 파일 마운트
      - ./nginx/deploy.conf:/etc/nginx/conf.d/deploy.conf                  # 블루-그린 배포 설정
      - ./nginx/upup-radio.site:/etc/nginx/site-available/upup-radio.site  # 도메인 관련 설정
    ports:
      - '80:80'
      - '443:443'
    networks:
      - bside-network
  mysql:
    image: 'mysql:8.0.39'
    profiles: ["dev", "prod"]
    volumes:
      - data:/var/lib/mysql
    container_name: bside-rdb
    env_file:
      - .env
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_PASSWORD: ${DB_PASSWD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWD}
      MYSQL_USER: ${DB_USERNAME}
    ports:
      - '3306:3306'
    networks:
      - bside-network
  redis:
    profiles: ["dev", "prod"]
    image: 'redis:7.4-alpine'
    restart: always
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      retries: 10
    container_name: bside-redis
    ports:
      - '6379:6379'
    networks:
      - bside-network
  backend:
    profiles: ["dev"]
    build:
      context: .
      dockerfile: Dockerfile-dev
    restart: always
    container_name: backend
    command: >
      sh -c "mkdir -p logs"
    volumes:
      - ./logs:/app/logs
    env_file:
      - .env
    ports:
      - '8081:8080'
      - '9292:9292'
    depends_on:
      mysql:
        condition: service_started
      redis:
        condition: service_healthy
    networks:
      - bside-network
  prometheus:
    image: prom/prometheus-linux-arm64
    profiles: ["prod"]
    restart: always
    container_name: prometheus
    volumes:
      - prometheus_data:/prometheus
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'  # 설정 파일 위치
      - '--storage.tsdb.path=/prometheus'               # 디스크 위치
      - '--storage.tsdb.retention.time=15d'             # 원하는 보관 기간 설정
    ports:
      - '9090:9090'
    networks:
      - bside-network
  grafana:
    profiles: ["prod"]
    image: grafana/grafana
    restart: always
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - '3000:3000'
  elasticsearch:
    image: elasticsearch:8.15.3
    profiles: ["prod"]
    container_name: elasticsearch
    command: >
      sh -c "elasticsearch-plugin install analysis-nori && /usr/local/bin/docker-entrypoint.sh"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
      - ./elk/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    ports:
      - '9200:9200'
      - '9300:9300'
    env_file:
      - .env
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: "-Xms2g -Xmx2g"
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - bside-network
  logstash:
    image: logstash:8.15.3
    profiles: ["prod"]
    container_name: logstash
    volumes:
      - ./elk/logstash.yml:/usr/share/logstash/config/logstash.yml:ro
      - ./elk/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "5044:5044"
    env_file:
      - .env
    environment:
      LOGSTASH_INTERNAL_USERNAME: ${LOGSTASH_INTERNAL_USERNAME}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD}
    networks:
      - bside-network
    depends_on:
      - elasticsearch
  kibana:
    image: kibana:8.15.3
    profiles: ["prod"]
    container_name: kibana
    volumes:
      - ./elk/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
    ports:
      - '5601:5601'
    env_file:
      - .env
    environment:
      ELASTIC_USERNAME: ${ELASTIC_USERNAME}
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD}
    networks:
      - bside-network
    depends_on:
      - elasticsearch
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.15.3
    profiles: ["prod"]
    container_name: filebeat
    user: root
    command: >
      sh -c "mkdir -p /var/logs && chown -R root /usr/share/filebeat && filebeat -e -strict.perms=false"
    env_file:
      - .env
    volumes:
      - ./logs:/var/logs
      - ./elk/filebeat.yml:/usr/share/filebeat/filebeat.yml
    networks:
      - bside-network
    depends_on:
      - logstash

networks:
  bside-network:
    name: bside-network
    driver: bridge

volumes:
  data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
